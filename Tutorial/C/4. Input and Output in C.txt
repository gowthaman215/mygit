// Input and output methods in c

/*

1. What is fact?

    1. a thing that is known or proved to be true.
    2. True Information at some suituation.
    

2. what is Data?

    1. Raw fact
    2. Un processed Information
    3. Piece of Information
    
    Example: Sun, East, 18, Male, Oviya, oviya.venkatesan@gmail.com, 29/12/2001

What is Information?


    Processed data is known as information.
    Example: Sun rises at east.

what is an Input?

1. Any Information is provided or given to the computer or any electronic device is considered as input.
2. in other words, when a computer or device is receiving a command or signal from outer sources, the event is referred to as input to the device.
3. Device used to perform input operation is known as Input Device.

Example: Keyboad, mouse, touch pannel, virtual keyboard(software interface used for input)

what is an output?

1. Any information that is processed by and sent out from a computer or other electronic device is considered as output.
2. Device used to perform output operation is known as Output Device.

Example: Monitor, Printer, Fax etc


Handline Input/output operation in C
====================================

1. C programming provides mechanism to handle input and output operations through input and output functions.

2. a Function in comuter programming is a set of instruction to perform specific task  or work.

3. Input fuction : function user for input operation is known as input function.


1. scanf(), 

syntax
======

scanf("format string", reference of variable);


example
=======

scanf("%d", &age);
scanf("%d %d",&age1,&age2);

%d - integer
%f - float
%c - character
%s - string


2. sscanf(),
3. gets(),
4. fgets(),
5. getc(),
6. getch()







4. Output function : function user for output operation is known as output function.

1. printf()
============

syntax:
======

printf("format string", list of varible name);


example:
========

printf("My age is %d\n", age);




sprintf(),
puts(),
fputs(),
putc()

*/


Format Specifier / field types
=============================

purpose of format character is to specify some type of data during the run time.

Character	Description
%	Prints a literal % character (this type doesn't accept any flags, width, precision, length fields).
d, i	int as a signed integer. %d and %i are synonymous for output, but are different when used with scanf() for input (where using %i will interpret a number as hexadecimal if it's preceded by 0x, and octal if it's preceded by 0.)
u	Print decimal unsigned int.
f, F	double in normal (fixed-point) notation. f and F only differs in how the strings for an infinite number or NaN are printed (inf, infinity and nan for f; INF, INFINITY and NAN for F).
e, E	double value in standard form ([-]d.ddd e[+/-]ddd). An E conversion uses the letter E (rather than e) to introduce the exponent. The exponent always contains at least two digits; if the value is zero, the exponent is 00. In Windows, the exponent contains three digits by default, e.g. 1.5e002, but this can be altered by Microsoft-specific _set_output_format function.
g, G	double in either normal or exponential notation, whichever is more appropriate for its magnitude. g uses lower-case letters, G uses upper-case letters. This type differs slightly from fixed-point notation in that insignificant zeroes to the right of the decimal point are not included. Also, the decimal point is not included on whole numbers.
x, X	unsigned int as a hexadecimal number. x uses lower-case letters and X uses upper-case.
o	unsigned int in octal.
s	null-terminated string.
c	char (character).
p	void * (pointer to void) in an implementation-defined format.
a, A	double in hexadecimal notation, starting with 0x or 0X. a uses lower-case letters, A uses upper-case letters.[5][6] (C++11 iostreams have a hexfloat that works the same).
n	Print nothing, but writes the number of characters successfully written so far into an integer pointer parameter.
Java: indicates a platform neutral newline/carriage return.[7]
Note: This can be utilized in Uncontrolled format string exploits.




   

